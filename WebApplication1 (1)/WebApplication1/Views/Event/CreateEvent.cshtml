@model WebApplication1.Models.EventModel


<div class="container">
    <br />
    <h3>Create Event</h3>
    <hr />
    @if (ViewBag.IsSuccess)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Congratulations!</strong> You have successfully created a new event.
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

<form method="post" asp-action="GetEvents" asp-controller="Event">

    <div class="form-group">
        @Html.LabelFor(m => m.Title, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">

        @Html.LabelFor(m => m.Date, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Date, String.Format("0:dd/MM/yyyy"), new { @class = "form-control", type = "Date" })
        @Html.ValidationMessageFor(m => m.Date, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Location, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Location, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Starttime, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Starttime, new { @class = "form-control", type = "Time" })
        @Html.ValidationMessageFor(m => m.Starttime, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Type, new { @class = "control-label" })
        @Html.DropDownList("Type", new List<SelectListItem> {
                new SelectListItem {Text="Public"},
                new SelectListItem {Text="Private"}
                }, new { @class = "form-control" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Duration, new { @class = "control-label" })
        @Html.DropDownList("Duration", new List<SelectListItem> {
                new SelectListItem {Text="1"},
                new SelectListItem {Text="2"},
                new SelectListItem {Text="3"},
                new SelectListItem {Text="4"}
                }, new { @class = "form-control" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Invitations, new { @class = "control-label" })
        @Html.EditorFor(model => model.Invitations, new { htmlAttributes = new { @class = "form-control", placeholder = "Write emails separated by comma" } })
        @Html.ValidationMessageFor(model => model.Invitations, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Description, new { @class = "control-label" })
        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Details, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Details, new { @class = "control-label" })
        @Html.TextAreaFor(m => m.Details, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Details, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <button class="btn btn-primary" type="submit"> Add Event</button>
    </div>
</form>
</div>